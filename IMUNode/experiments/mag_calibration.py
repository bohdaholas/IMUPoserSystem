import numpy as np
from numpy.linalg import norm, inv

# Calibration algorithm used is described here https://pmc.ncbi.nlm.nih.gov/articles/PMC8401862/

# Constants and initial values - to be defined based on actual problem setup
measurements = [
 [33.6, -33.6, -8.1],
 [34.0, -33.6, -7.7],
 [37.7, -33.2, -4.2],
 [38.4, -31.8, -10.0],
 [48.8, -36.9, -29.2],
 [48.8, -41.8, -57.2],
 [34.4, -41.0, -77.2],
 [17.4, -35.1, -88.5],
 [0.8, -25.1, -93.5],
 [-18.1, -12.6, -93.1],
 [-32.1, -1.9, -87.2],
 [-39.4, 0.2, -80.8],
 [-44.6, -1.1, -76.9],
 [-49.4, -2.6, -70.8],
 [-51.6, -0.4, -66.9],
 [-54.6, -2.6, -61.1],
 [-56.1, -4.4, -55.4],
 [-57.6, -5.2, -50.8],
 [-56.8, -5.2, -46.5],
 [-57.9, -4.8, -42.2],
 [-56.8, -5.6, -36.9],
 [-56.1, -5.2, -31.1],
 [-54.6, -4.8, -27.7],
 [-53.1, -3.8, -21.9],
 [-50.2, -3.4, -20.0],
 [-46.9, -2.6, -14.2],
 [-43.1, -1.9, -12.2],
 [-39.4, -0.4, -8.1],
 [-33.2, 0.0, -4.6],
 [-21.0, -7.4, 0.0],
 [-16.2, -7.4, -0.4],
 [-11.1, -7.4, -0.4],
 [-5.1, -7.4, 0.0],
 [-1.8, -5.9, -0.8],
 [1.1, -4.4, -1.1],
 [5.6, -3.4, -3.1],
 [10.4, -3.4, -6.5],
 [14.8, -3.0, -8.4],
 [20.2, -5.6, -14.6],
 [23.2, -4.8, -18.4],
 [26.6, -4.8, -23.8],
 [28.8, -5.6, -29.2],
 [30.7, -5.6, -34.6],
 [31.1, -5.9, -38.1],
 [30.7, -6.2, -39.2],
 [30.2, -6.2, -42.2],
 [31.8, -6.7, -46.1],
 [31.4, -6.2, -49.2],
 [30.7, -7.1, -51.1],
 [29.2, -7.8, -53.8],
 [28.1, -7.4, -58.8],
 [24.4, -6.2, -65.8],
 [23.6, -6.7, -66.9],
 [21.8, -6.2, -69.2],
 [19.9, -4.4, -72.6],
 [18.5, -2.6, -74.2],
 [17.0, -3.0, -75.2],
 [15.6, -4.1, -76.9],
 [15.2, -4.1, -76.9],
 [15.6, -5.2, -76.1],
 [15.6, -7.1, -76.1],
 [14.1, -11.5, -74.9],
 [11.1, -12.9, -76.8],
 [11.5, -19.2, -73.0],
 [11.1, -27.0, -64.9],
 [11.8, -31.4, -56.5],
 [12.2, -33.6, -48.0],
 [11.8, -34.8, -40.8],
 [12.2, -34.4, -37.6],
 [11.8, -34.0, -33.4],
 [10.8, -33.6, -26.1],
 [7.8, -31.4, -22.2],
 [5.6, -29.2, -17.2],
 [2.6, -28.1, -12.6],
 [-0.2, -22.6, -7.6],
 [-2.6, -18.5, -6.5],
 [-2.9, -15.6, -3.1],
 [-6.6, -7.4, 0.0],
 [-10.2, 3.7, 0.0],
 [-11.4, 7.4, -0.8],
 [-11.8, 14.8, -2.2],
 [-13.6, 19.9, -4.6],
 [-18.1, 30.2, -13.1],
 [-23.2, 37.2, -24.2],
 [-24.7, 40.9, -34.9],
 [-23.9, 41.2, -42.6],
 [-23.2, 40.6, -51.5],
 [-22.5, 38.0, -60.7],
 [-24.2, 32.4, -68.4],
 [-26.2, 26.9, -73.0],
 [-25.8, 21.0, -76.4],
 [-26.9, 16.2, -79.2],
 [-26.6, 11.1, -82.2],
 [-25.4, 5.9, -82.6],
 [-26.9, 2.2, -83.0],
 [-28.8, -1.1, -83.0],
 [-29.5, -3.0, -82.2],
 [-28.0, -6.2, -81.9],
 [-23.9, -10.4, -81.1],
 [-24.7, -15.6, -78.4],
 [-26.2, -22.9, -74.2],
 [-25.4, -26.6, -71.1],
 [-25.4, -29.2, -69.2],
 [-26.6, -29.9, -68.4],
 [-26.9, -29.9, -67.6],
 [-27.2, -30.7, -64.6],
 [-28.4, -32.5, -61.1],
 [-29.1, -36.6, -55.2],
 [-29.9, -38.8, -48.0],
 [-30.6, -39.1, -36.5],
 [-28.8, -36.6, -27.2],
 [-25.4, -33.2, -18.1],
 [-24.7, -27.7, -10.8],
 [-23.6, -20.7, -6.1],
 [-24.2, -12.2, -3.4],
 [-25.1, -4.1, -1.9],
 [-26.2, -0.4, -1.9],
 [-31.0, 1.4, -6.1],
 [-33.9, 1.4, -6.5],
 [-36.1, 5.9, -8.4],
 [-39.8, 13.6, -13.4],
 [-45.4, 14.4, -19.6],
 [-45.0, 19.9, -22.2],
 [-45.4, 21.8, -27.2],
 [-46.8, 24.7, -33.4],
 [-46.8, 27.2, -41.9],
 [-45.0, 28.8, -50.7],
 [-41.7, 29.1, -60.7],
 [-36.5, 29.1, -66.9],
 [-26.9, 27.2, -75.2],
 [-22.9, 24.2, -79.1],
 [-15.1, 21.8, -81.5],
 [-9.9, 16.9, -81.5],
 [-4.0, 12.9, -83.8],
 [7.8, 8.8, -79.9],
 [17.8, 6.2, -73.4],
 [24.8, 7.8, -65.2],
 [27.2, 10.7, -55.7],
 [31.4, 13.2, -43.0],
 [29.6, 13.2, -31.1],
 [28.1, 14.4, -25.2],
 [24.8, 15.5, -21.5],
 [17.8, 14.4, -12.6],
 [9.6, 11.8, -4.9],
 [4.1, 10.7, -3.8],
 [-5.5, 8.4, -2.2],
 [-9.6, 11.4, -2.2],
 [-14.0, 9.2, -1.1],
 [-19.5, 6.6, -1.1],
 [-23.6, 4.8, -2.7],
 [-30.6, 1.1, -6.1],
 [-39.4, -2.2, -12.2],
 [-46.8, -8.5, -20.8],
 [-50.6, -18.5, -34.6],
 [-71.0, 5.0, -39.5],
 [-68.0, 1.9, -50.6],
 [-58.1, 1.2, -62.1],
 [-52.1, 2.2, -67.1],
 [-45.1, 3.0, -71.4],
 [-37.2, 5.0, -54.2],
 [-29.1, 7.5, -57.2],
 [-26.8, 6.8, -55.0],
 [-20.5, 5.2, -51.5],
 [-16.9, 4.2, -49.2],
 [-13.9, 2.4, -47.2],
 [-10.6, 2.0, -44.6],
 [-7.2, 1.6, -40.8],
 [-7.2, -0.2, -38.5],
 [-4.7, 0.9, -33.1],
 [-1.7, 2.7, -23.5],
 [-0.6, 2.4, -12.7],
 [-3.5, 3.5, 2.2],
 [-16.5, 6.8, 15.4],
 [-24.6, 10.1, 20.7],
 [-32.4, 12.4, 22.2],
 [-40.1, 16.4, 22.2],
 [-47.1, 20.1, 22.2],
 [-53.4, 20.8, 21.1],
 [-56.7, 19.0, 20.4],
 [-59.7, 19.4, 17.6],
 [-67.1, 20.1, 11.9],
 [-72.6, 19.7, 4.5],
 [-78.1, 23.4, -4.6],
 [-81.4, 28.5, -11.6],
 [-81.8, 28.2, -20.0],
 [-80.7, 25.6, -30.0],
 [-77.1, 22.7, -38.1],
 [-69.2, 20.8, -47.7],
 [-62.6, 16.4, -53.1],
 [-53.8, 12.7, -55.4],
 [-47.1, 12.0, -56.1],
 [-43.8, 12.7, -56.6],
 [-40.5, 13.0, -58.1],
 [-38.6, 10.5, -55.8],
 [-36.8, 13.0, -55.8],
 [-36.1, 19.7, -57.2],
 [-35.7, 25.6, -59.6],
 [-33.5, 21.5, -58.1],
 [-19.0, 10.5, -51.1],
 [-3.9, 5.7, -37.7],
 [2.7, 9.4, -28.1],
 [7.5, 14.5, -11.6],
 [-6.2, 16.7, 13.4],
 [-10.6, 15.7, 17.2],
 [-22.4, 12.4, 19.9],
 [-26.8, 13.4, 20.7],
 [-40.1, 14.9, 22.2],
 [-53.1, 17.5, 19.5],
 [-60.1, 19.4, 15.4],
 [-7.0, 152.2, -5.1],
 [-11.4, 156.0, -9.8],
 [-11.1, 155.2, -10.9],
 [-15.8, 158.9, -19.8],
 [-17.7, 166.7, -32.8],
 [-17.7, 167.4, -42.4],
 [-14.0, 168.9, -54.2],
 [-8.1, 168.6, -61.6],
 [-1.1, 171.5, -67.4],
 [7.8, 166.7, -72.8],
 [17.4, 166.2, -74.7],
 [24.7, 168.2, -75.5],
 [29.6, 168.9, -73.9],
 [11.9, 89.2, -48.8],
 [28.5, 85.6, -33.5],
 [36.2, 84.5, -15.0],
 [34.1, 77.9, 3.0],
 [25.9, 69.0, 13.9],
 [17.8, 65.7, 18.9],
 [4.9, 61.2, 23.9],
 [-6.6, 60.6, 26.1],
 [-15.4, 61.6, 26.1],
 [-27.2, 60.2, 20.0],
 [-33.9, 60.6, 16.5],
 [-43.9, 61.2, 5.4],
 [-52.2, 66.8, -15.0],
 [-47.2, 65.6, -13.4],
 [-43.1, 65.2, -23.8],
 [-37.2, 67.4, -32.2],
 [-36.8, 71.1, -34.6],
 [-33.1, 73.7, -38.1],
 [-25.8, 73.7, -41.5],
 [-18.4, 77.0, -44.2],
 [-9.2, 75.2, -44.2],
 [6.0, 76.2, -41.9],
 [8.2, 78.5, -41.1],
 [4.1, 79.6, -42.2],
 [-1.1, 92.9, -40.2],
 [12.2, 108.8, -25.8],
 [19.6, 112.1, -13.8],
 [26.6, 107.2, -8.4],
 [32.9, 98.1, -7.2],
 [35.1, 95.1, -6.5],
 [30.2, 100.6, -12.7],
 [17.4, 110.6, -14.2],
 [7.1, 116.9, -10.2],
 [-2.5, 120.6, -6.9],
 [-15.1, 121.7, -7.2],
 [-31.0, 114.7, -14.9],
 [-31.7, 99.9, -31.9],
 [-18.8, 82.9, -43.8],
 [7.8, 71.1, -40.8],
 [29.9, 65.2, -22.6],
 [38.1, 69.2, -4.9],
 [39.2, 73.2, 6.7],
 [36.6, 82.8, 6.7],
 [34.7, 91.2, 1.2],
 [25.1, 103.4, -3.2],
 [17.0, 108.9, -4.1],
 [20.4, 107.4, 0.6],
 [21.1, 106.7, -3.7],
 [23.2, 103.8, -11.0],
 [21.8, 93.8, -23.7],
 [22.6, 76.4, -30.6],
 [22.9, 58.7, -25.2],
 [16.2, 48.7, -25.6],
 [-0.2, 54.2, -42.9],
 [-24.7, 72.4, -44.5],
 [-23.6, 101.9, -32.9],
 [-3.2, 119.6, -8.7],
 [11.9, 113.8, 0.1],
 [21.1, 107.8, 1.2],
 [39.9, 65.4, 8.2],
 [35.9, 29.1, -1.8],
 [23.2, 9.6, -11.0],
 [8.9, 7.7, -27.5],
 [1.1, 23.6, -42.2],
 [-8.1, 53.1, -45.2],
 [4.8, 69.8, -32.6],
 [26.8, 51.6, -20.6],
 [38.4, 34.6, -5.2],
 [41.1, 16.9, -0.2],
 [39.6, 12.9, -8.0],
 [33.6, 28.2, -19.2],
 [18.8, 42.2, -22.2],
 [-2.2, 44.8, -32.7],
 [-17.8, 16.4, -44.6],
 [-0.6, -2.1, -45.2],
 [23.8, -21.1, -27.8],
 [35.2, -22.6, -1.2],
 [41.1, -9.0, 7.2],
 [45.5, 4.7, 6.7],
 [42.6, 22.8, 3.2],
 [31.5, 37.2, -5.2],
 [19.2, 44.2, -11.0],
 [10.8, 41.2, -27.1],
 [3.7, 14.8, -46.0],
 [22.7, -2.6, -43.1],
 [30.8, -6.0, -41.1],
 [38.2, -11.1, -31.1],
 [40.8, -12.6, 3.1],
 [81.0, -30.2, 11.6],
 [81.7, -23.7, 100.4],
 [64.1, -20.8, 138.5],
 [67.0, -32.9, 141.2],
 [67.0, -31.8, 141.2],
 [67.0, -32.2, 135.8],
 [66.2, -31.8, 137.0],
 [65.5, -31.1, 139.2],
 [66.2, -31.4, 136.6],
 [66.2, -31.8, 136.6],
 [69.6, -34.0, 128.5],
 [78.8, -41.8, 103.5],
 [75.9, -46.6, 88.9],
 [71.8, -54.2, 63.1],
 [59.2, -51.4, 63.1],
 [44.9, -42.9, 80.0],
 [48.6, -46.9, 69.2],
 [48.9, -47.7, 63.9]
]
Y = np.array(measurements).T
K = Y.shape[1]
tolerance = 1e-6
max_iterations = 1000

# Step 1: Initialize mk using (59)
# mk = Yk / ||Yk|| for k = 1, 2, ..., K
mk = np.array([Y[:, k] / norm(Y[:, k]) for k in range(K)]).T

def cost_function(mk):
    return sum((norm(mk[:, k]) ** 2 - 1) ** 2 for k in range(K))

J = float('inf')
iteration = 0
while J > tolerance and iteration < max_iterations:
    # Step 2: Calculate L using (62)
    G = np.vstack((mk, np.ones(K)))  # Create G from mk (61c)
    L = Y @ G.T @ inv(G @ G.T)  # Calculate L (62)

    # Step 3: Extract T and h from L using (61b)
    T = L[:, :-1]
    h = L[:, -1]

    # Step 4: Update mk using (63) and (64)
    for k in range(K):
        mk_hat = inv(T) @ (Y[:, k] - h)  # Update mk (64)
        mk[:, k] = mk_hat / norm(mk_hat)  # Update mk (63)

    # Step 5: Evaluate the cost-plus-penalty function J from (65)
    J = cost_function(mk)

    iteration += 1

if iteration < max_iterations:
    print("Convergence reached after", iteration, "iterations.")
else:
    print("Max iterations reached without convergence.")

T_final = T
h_final = h
J_final = J

print(T_final, h_final, J_final)
